{"version":3,"file":"static/js/3462.ae2c3a98.chunk.js","mappings":"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","sources":["Loading.jsx","components/Expenses/AddExpense.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nexport default function LoadingScreen() {\n    const[isSidebarOpen,setSidebarOpen]=useState(false)\n    return (\n        <div className='flex flex-col h-screen'>\n        {/* Navbar component with sidebar open state */}\n        <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n        <div className='flex flex-grow mt-20'>\n          <div>\n            {/* Sidebar component with open state */}\n            <Sidebar isSidebarOpen={isSidebarOpen} />\n          </div>\n  \n          {/* Container for the entire component */}\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 rounded-full border-cyan-500 border-t-transparent animate-spin\"></div>\n            <p className=\"mt-3 text-lg font-semibold text-gray-700\">Loading...</p>\n          </div>\n        </div>\n          \n        </div>\n      </div>\n    );\n  }\n  ","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../Navbar.jsx\";\r\nimport Sidebar from \"../Sidebar.jsx\";\r\nimport LoadingScreen from \"../../Loading\";\r\nimport { BiChevronRight } from \"react-icons/bi\";\r\nimport { FaTachometerAlt } from \"react-icons/fa\";\r\n\r\nfunction AddExpense() {\r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const id = searchParams.get(\"id\"); // if present, we're in edit mode\r\n\r\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Dropdown data for Expense Categories, Payment Types, and Accounts\r\n  const [expenseCategories, setExpenseCategories] = useState([]);\r\n  const [paymentTypes, setPaymentTypes] = useState([]);\r\n  const [accounts, setAccounts] = useState([]);\r\n useEffect(()=>{\r\n    if(window.innerWidth < 768){\r\n      setSidebarOpen(false)\r\n    }\r\n  },[])\r\n  // Expense form data\r\n  const [expenseData, setExpenseData] = useState({\r\n    date: \"\",\r\n    referenceNo: \"\",\r\n    category: \"\",\r\n    expenseFor: \"\",\r\n    paymentType: \"\",\r\n    account: \"\",\r\n    amount: \"\",\r\n    note: \"\",\r\n    status: \"Active\",\r\n  });\r\n\r\n  // Fetch dropdown data on mount\r\n  useEffect(() => {\r\n    fetchExpenseCategories();\r\n    fetchPaymentTypes();\r\n    fetchAccounts();\r\n  }, []);\r\n\r\n  // Fetch expense categories from new API endpoint\r\n  const fetchExpenseCategories = async () => {\r\n    try {\r\n      const res = await axios.get(\"api/expense-categories\", {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      });\r\n      setExpenseCategories(Array.isArray(res.data) ? res.data : (res.data.data || []));\r\n    } catch (error) {\r\n      console.error(\"Error fetching expense categories:\", error.message);\r\n    }\r\n  };\r\n\r\n  const fetchPaymentTypes = async () => {\r\n    try {\r\n      const res = await axios.get(\"api/payment-types\", {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      });\r\n      setPaymentTypes(res.data.data || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching payment types:\", error.message);\r\n    }\r\n  };\r\n\r\n  const fetchAccounts = async () => {\r\n    try {\r\n      const res = await axios.get(\"api/accounts\", {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n      });\r\n      setAccounts(res.data.data || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching accounts:\", error.message);\r\n    }\r\n  };\r\n\r\n  // If editing, fetch expense details\r\n  useEffect(() => {\r\n    if (id) {\r\n      const fetchExpense = async () => {\r\n        setLoading(true);\r\n        try {\r\n          const res = await axios.get(`api/expenses/${id}`, {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n          });\r\n          const data = res.data.data;\r\n          setExpenseData({\r\n            date: data.date ? data.date.split(\"T\")[0] : \"\",\r\n            referenceNo: data.referenceNo || \"\",\r\n            category: data.category?._id || \"\",\r\n            expenseFor: data.expenseFor || \"\",\r\n            paymentType: data.paymentType?._id || \"\",\r\n            account: data.account?._id || \"\",\r\n            amount: data.amount || \"\",\r\n            note: data.note || \"\",\r\n            status: data.status || \"Active\",\r\n          });\r\n        } catch (error) {\r\n          console.error(\"Error fetching expense:\", error.message);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n      fetchExpense();\r\n    }\r\n  }, [id]);\r\n\r\n  // Handle form field changes\r\n  const handleChange = (e) => {\r\n    setExpenseData({ ...expenseData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Submit the expense form\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      // Prepare payload and remove empty strings for optional fields\r\n      const expensePayload = { ...expenseData };\r\n      if (expensePayload.category === \"\") delete expensePayload.category;\r\n      if (expensePayload.account === \"\") delete expensePayload.account;\r\n\r\n      if (id) {\r\n        // Update expense\r\n        await axios.put(\r\n          `api/expenses/${id}`,\r\n          expensePayload,\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n          }\r\n        );\r\n        alert(\"Expense updated successfully!\");\r\n      } else {\r\n        // Create new expense\r\n        await axios.post(\r\n          \"api/expenses\",\r\n          expensePayload,\r\n          {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\r\n          }\r\n        );\r\n        alert(\"Expense created successfully!\");\r\n      }\r\n      navigate(\"/expense-list\"); // Ensure your route for the list matches this path\r\n    } catch (error) {\r\n      console.error(\"Error submitting expense:\", error.message);\r\n      alert(\"Error submitting expense\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Close the form without saving\r\n  const handleClose = () => {\r\n    navigate(\"/expense-list\");\r\n  };\r\n\r\n  if (loading) return <LoadingScreen />;\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-screen bg-gray-100\">\r\n      {/* Navbar */}\r\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\r\n      {/* Main layout: Sidebar & Content */}\r\n      <div className=\"flex flex-grow\">\r\n        <Sidebar isSidebarOpen={isSidebarOpen} />\r\n        <div className={`flex-grow p-4  transition-all duration-300 `}>\r\n          {/* Header with Breadcrumbs */}\r\n          <header className=\"flex flex-col items-center justify-between p-4 mb-1 bg-white rounded-md shadow sm:flex-row\">\r\n            <div className=\"flex items-baseline gap-2 sm:flex-row\">\r\n              <h1 className=\"text-xl font-semibold text-gray-800\">\r\n                {id ? \"Edit Expense\" : \"Expense\"}\r\n              </h1>\r\n              <span className=\"text-sm text-gray-600\">\r\n                {id ? \"Edit Expense\" : \"Add Expense\"}\r\n              </span>\r\n            </div>\r\n            <nav className=\"flex items-center text-sm text-gray-500\">\r\n              <a href=\"/dashboard\" className=\"flex items-center text-gray-700 no-underline hover:text-cyan-600\">\r\n                <FaTachometerAlt className=\"mr-2\" /> Home\r\n              </a>\r\n              <BiChevronRight className=\"mx-2 \" />\r\n              <a href=\"/expense-list\" className=\"text-gray-700 no-underline hover:text-cyan-600\">\r\n                Expense List\r\n              </a>\r\n            </nav>\r\n          </header>\r\n          {/* Form Container */}\r\n          <div className=\"p-4 bg-white border-t-4 rounded-md shadow-md border-cyan-500\">\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2\">\r\n                {/* Expense Date */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Expense Date</label>\r\n                  <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    value={expenseData.date}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                    required\r\n                  />\r\n                </div>\r\n                {/* Category (Expense Category) */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Category</label>\r\n                  <select\r\n                    name=\"category\"\r\n                    value={expenseData.category}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                  >\r\n                    <option value=\"\">Select Category</option>\r\n                    {expenseCategories.map((cat) => (\r\n                      <option key={cat._id} value={cat._id}>\r\n                        {cat.categoryName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                {/* Payment Type */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Payment Type</label>\r\n                  <select\r\n                    name=\"paymentType\"\r\n                    value={expenseData.paymentType}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select</option>\r\n                    {paymentTypes.map((pt) => (\r\n                      <option key={pt._id} value={pt._id}>\r\n                        {pt.paymentTypeName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                {/* Account */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Account</label>\r\n                  <select\r\n                    name=\"account\"\r\n                    value={expenseData.account}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                  >\r\n                    <option value=\"\">None</option>\r\n                    {accounts.map((acc) => (\r\n                      <option key={acc._id} value={acc._id}>\r\n                        {acc.accountName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                {/* Reference No */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Reference No.</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"referenceNo\"\r\n                    value={expenseData.referenceNo}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                  />\r\n                </div>\r\n                {/* Expense For */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Expense For</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"expenseFor\"\r\n                    value={expenseData.expenseFor}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                  />\r\n                </div>\r\n                {/* Amount */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Amount</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    name=\"amount\"\r\n                    value={expenseData.amount}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                    required\r\n                  />\r\n                </div>\r\n                {/* Note */}\r\n                <div>\r\n                  <label className=\"block mb-1 font-semibold\">Note</label>\r\n                  <textarea\r\n                    name=\"note\"\r\n                    rows=\"2\"\r\n                    value={expenseData.note}\r\n                    onChange={handleChange}\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* Form Buttons */}\r\n              <div className=\"flex justify-end mt-4 space-x-2\">\r\n                <button type=\"submit\" className=\"px-6 py-2 font-semibold text-white bg-green-500 rounded-md shadow hover:bg-green-600\">\r\n                  {id ? \"Update Expense\" : \"Save\"}\r\n                </button>\r\n                <button type=\"button\" onClick={handleClose} className=\"px-6 py-2 font-semibold text-white bg-orange-500 rounded-md shadow hover:bg-orange-600\">\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddExpense;\r\n"],"names":["LoadingScreen","isSidebarOpen","setSidebarOpen","useState","_jsxs","className","children","_jsx","Navbar","Sidebar","navigate","useNavigate","searchParams","useSearchParams","id","get","loading","setLoading","expenseCategories","setExpenseCategories","paymentTypes","setPaymentTypes","accounts","setAccounts","useEffect","window","innerWidth","expenseData","setExpenseData","date","referenceNo","category","expenseFor","paymentType","account","amount","note","status","fetchExpenseCategories","fetchPaymentTypes","fetchAccounts","async","res","axios","headers","Authorization","localStorage","getItem","Array","isArray","data","error","console","message","_data$category","_data$paymentType","_data$account","split","_id","fetchExpense","handleChange","e","target","name","value","href","FaTachometerAlt","BiChevronRight","onSubmit","preventDefault","expensePayload","put","alert","post","type","onChange","required","map","cat","categoryName","pt","paymentTypeName","acc","accountName","rows","onClick","handleClose"],"sourceRoot":""}