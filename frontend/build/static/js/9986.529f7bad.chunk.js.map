{"version":3,"file":"static/js/9986.529f7bad.chunk.js","mappings":"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","sources":["components/contact/AddressList.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport { NavLink } from 'react-router-dom';\nimport { FaTachometerAlt, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport Navbar from '../Navbar';\nimport Sidebar from '../Sidebar';\n\n/* ─────── axios instance ─────── */\nconst api = axios.create({ baseURL: '/vps/api' });\napi.interceptors.request.use(cfg => {\n  const t = localStorage.getItem('token');\n  if (t) cfg.headers.Authorization = `Bearer ${t}`;\n  return cfg;\n});\n\n/* quick haversine (km) */\nconst distKm = (lat1,lng1,lat2,lng2) => {\n  const R=6371, toRad=x=>x*Math.PI/180;\n  const dLat=toRad(lat2-lat1), dLng=toRad(lng2-lng1);\n  const a=Math.sin(dLat/2)**2 + Math.cos(toRad(lat1))*Math.cos(toRad(lat2))*Math.sin(dLng/2)**2;\n  return 2*R*Math.asin(Math.sqrt(a));\n};\n\nexport default function AdminAllAddresses() {\n  /* layout */\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\n\n  /* data */\n  const [raw, setRaw]      = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error,   setError]   = useState(null);\n\n  /* text filters */\n  const [q, setQ] = useState({ customer:'', street:'', area:'', city:'', state:'', postalCode:'' });\n\n  /* optional distance filter */\n  const [useDistance, setUseDistance] = useState(false);\n  const [radiusKm, setRadiusKm] = useState(5);\n  const [center, setCenter] = useState({ lat:'', lng:'' });\n\n  /* expand/collapse */\n  const [openIds, setOpenIds] = useState(()=>new Set());\n  const toggle = id => setOpenIds(p=>{const n=new Set(p); n.has(id)?n.delete(id):n.add(id); return n;});\n\n  /* fetch once */\n  useEffect(() => {\n    setLoading(true);\n    api.get('/addresses/admin/all')\n      .then(r => { setRaw(r.data.data||[]); setError(null); })\n      .catch(()=> setError('Failed to load addresses'))\n      .finally(()=> setLoading(false));\n  }, []);\n\n  const includes = (field,val)=>field.toLowerCase().includes(val.toLowerCase());\n\n  /* group + filter */\n  const grouped = useMemo(() => {\n    const wantGeo = useDistance && center.lat && center.lng && !Number.isNaN(parseFloat(center.lat)) && !Number.isNaN(parseFloat(center.lng));\n    const cLat = parseFloat(center.lat), cLng=parseFloat(center.lng);\n\n    const map=new Map();\n    for(const addr of raw){\n      const name=addr.user?.name||'Unknown customer';\n      const userId=addr.user?._id||`unknown-${addr._id}`;\n\n      // text filters\n      if(q.customer&& !includes(name,q.customer)) continue;\n      if(q.street&& !includes(addr.street||'',q.street)) continue;\n      if(q.area&& !includes(addr.area||'',q.area)) continue;\n      if(q.city&& !includes(addr.city||'',q.city)) continue;\n      if(q.state&& !includes(addr.state||'',q.state)) continue;\n      if(q.postalCode&& !includes(addr.postalCode||'',q.postalCode)) continue;\n\n      // optional distance filter\n      if(wantGeo){\n        const coords=addr.location?.coordinates;\n        if(!coords) continue;\n        const [lng,lat]=coords;\n        if(distKm(cLat,cLng,lat,lng)>radiusKm) continue;\n      }\n\n      if(!map.has(userId)) map.set(userId,{name,addresses:[]});\n      map.get(userId).addresses.push(addr);\n    }\n    for(const g of map.values()) g.addresses.sort((a,b)=>(b.isDefault?1:0)-(a.isDefault?1:0));\n    return [...map.entries()];\n  }, [raw,q,useDistance,center,radiusKm]);\n\n  /* helper to auto-fill coords from browser */\n  const geoMe = () => {\n    if(!navigator.geolocation) return alert('Geolocation not supported');\n    navigator.geolocation.getCurrentPosition(pos=>{\n      setCenter({ lat: pos.coords.latitude.toFixed(6), lng: pos.coords.longitude.toFixed(6) });\n      setUseDistance(true);\n    }, ()=>alert('Unable to get position'));\n  };\n\n  /* ─────── UI ─────── */\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen}/>\n      <div className=\"flex flex-1\">\n        <Sidebar isSidebarOpen={isSidebarOpen}/>\n        <main className=\"flex-1 p-6 bg-gray-100 overflow-auto\">\n          <div className=\"flex justify-between items-end mb-6\">\n            <div>\n              <h1 className=\"text-2xl font-semibold\">Customer Addresses</h1>\n              <p className=\"text-sm text-gray-600\">Default address shown first. Click row to expand.</p>\n            </div>\n            <NavLink to=\"/dashboard\" className=\"flex items-center text-gray-700 hover:underline\"><FaTachometerAlt className=\"mr-1\"/>Home</NavLink>\n          </div>\n\n          {/* distance toggle */}\n          <div className=\"mb-6 flex items-center gap-4 flex-wrap\">\n            <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700\">\n              <input type=\"checkbox\" checked={useDistance} onChange={e=>setUseDistance(e.target.checked)} />\n              Enable distance filter\n            </label>\n            {useDistance && (\n              <>\n                <input type=\"number\" step=\"any\" placeholder=\"Latitude\" value={center.lat}\n                       onChange={e=>setCenter({...center,lat:e.target.value})}\n                       className=\"p-2 border border-gray-300 rounded w-32\" />\n                <input type=\"number\" step=\"any\" placeholder=\"Longitude\" value={center.lng}\n                       onChange={e=>setCenter({...center,lng:e.target.value})}\n                       className=\"p-2 border border-gray-300 rounded w-32\" />\n                <input type=\"range\" min={1} max={5000} value={radiusKm}\n                       onChange={e=>setRadiusKm(parseInt(e.target.value))} className=\"w-40\" />\n                <span className=\"text-sm text-gray-700\">{radiusKm} km</span>\n                <button onClick={geoMe} className=\"px-3 py-1 text-sm bg-blue-500 text-white rounded\">Use my location</button>\n              </>\n            )}\n          </div>\n\n          {/* text filters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-6 gap-2 mb-6\">\n            {['customer','street','area','city','state','postalCode'].map(key=> (\n              <input key={key} name={key} placeholder={key} value={q[key]}\n                     onChange={e=>setQ(prev=>({...prev,[key]:e.target.value}))}\n                     className=\"p-2 border border-gray-300 rounded\" />\n            ))}\n          </div>\n\n          {error && <div className=\"p-3 mb-4 bg-red-100 text-red-700 rounded\">{error}</div>}\n          {loading && <div>Loading…</div>}\n          {!loading && grouped.length===0 && !error && <div className=\"text-gray-600\">No matches.</div>}\n\n          {!loading && grouped.length>0 && (\n            <div className=\"space-y-4\">\n              {grouped.map(([userId,group])=>{\n                const [first,...rest]=group.addresses;\n                const open=openIds.has(userId);\n                return (\n                  <div key={userId} className=\"bg-white rounded shadow divide-y\">\n                    <button onClick={()=>toggle(userId)} className=\"w-full text-left p-4 flex justify-between hover:bg-gray-50\">\n                      <div>\n                        <div className=\"font-semibold\">{group.name}{first.isDefault&&<span className=\"ml-2 text-sm text-green-600\">(Default)</span>}</div>\n                        <div className=\"text-gray-700\">{first.label} – {first.street}{first.area&&`, ${first.area}`}, {first.city}, {first.state}, {first.country} — {first.postalCode}</div>\n                      </div>\n                      {rest.length>0 && (open? <FaChevronDown className=\"mt-1\"/>:<FaChevronRight className=\"mt-1\"/>)}\n                    </button>\n                    {open&&rest.length>0 && (\n                      <div className=\"p-4 space-y-2\">{rest.map(a=>(<div key={a._id} className=\"text-gray-700\">{a.label} – {a.street}{a.area&&`, ${a.area}`}, {a.city}, {a.state}, {a.country} — {a.postalCode}</div>))}</div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}"],"names":["api","axios","create","baseURL","interceptors","request","use","cfg","t","localStorage","getItem","headers","Authorization","distKm","lat1","lng1","lat2","lng2","toRad","x","Math","PI","dLat","dLng","a","sin","cos","asin","sqrt","AdminAllAddresses","isSidebarOpen","setSidebarOpen","useState","raw","setRaw","loading","setLoading","error","setError","q","setQ","customer","street","area","city","state","postalCode","useDistance","setUseDistance","radiusKm","setRadiusKm","center","setCenter","lat","lng","openIds","setOpenIds","Set","useEffect","get","then","r","data","catch","finally","includes","field","val","toLowerCase","grouped","useMemo","wantGeo","Number","isNaN","parseFloat","cLat","cLng","map","Map","addr","_addr$user","_addr$user2","name","user","userId","_id","_addr$location","coords","location","coordinates","has","set","addresses","push","g","values","sort","b","isDefault","entries","_jsxs","className","children","_jsx","Navbar","Sidebar","NavLink","to","FaTachometerAlt","type","checked","onChange","e","target","_Fragment","step","placeholder","value","min","max","parseInt","onClick","geoMe","navigator","geolocation","alert","getCurrentPosition","pos","latitude","toFixed","longitude","key","prev","length","_ref","group","first","rest","open","toggle","id","p","n","delete","add","label","country","FaChevronDown","FaChevronRight"],"sourceRoot":""}