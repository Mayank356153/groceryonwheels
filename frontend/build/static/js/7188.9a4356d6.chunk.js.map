{"version":3,"file":"static/js/7188.9a4356d6.chunk.js","mappings":"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","sources":["Loading.jsx","components/contact/Input.jsx","components/contact/Button.jsx","components/contact/Customerlist.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nexport default function LoadingScreen() {\n    const[isSidebarOpen,setSidebarOpen]=useState(false)\n    return (\n        <div className='flex flex-col h-screen'>\n        {/* Navbar component with sidebar open state */}\n        <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n        <div className='flex flex-grow mt-20'>\n          <div>\n            {/* Sidebar component with open state */}\n            <Sidebar isSidebarOpen={isSidebarOpen} />\n          </div>\n  \n          {/* Container for the entire component */}\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 rounded-full border-cyan-500 border-t-transparent animate-spin\"></div>\n            <p className=\"mt-3 text-lg font-semibold text-gray-700\">Loading...</p>\n          </div>\n        </div>\n          \n        </div>\n      </div>\n    );\n  }\n  ","import React from \"react\";\r\nimport { useId } from 'react'; // Importing useId hook for generating unique IDs\r\n\r\nexport default function Input({\r\n  id=\" \",\r\n  type = \"text\", // Default input type is \"text\"\r\n  label_class = \"\", // Class for the label, default is an empty string\r\n  label, // Label text for the input\r\n  className = \"\", // Class for the input element, default is an empty string\r\n  placeholder = \"\", // Placeholder text for the input\r\n  div_class = \"\", // Class for the div container, default is an empty string\r\n  ...props // Spread operator to capture any additional props\r\n}) {\r\n  const ID = useId(); // Generate a unique ID for the input element\r\n\r\n  return (\r\n    <div className={div_class}> {/* Container div for the input and label */}\r\n      {label ? <label className={label_class} htmlFor={id===\" \"?ID:id}>{label}</label> : null} {/* Render label if provided */}\r\n      <input \r\n        type={type} // Set the input type\r\n        id={id===\" \"?ID:id} // Set the unique ID for the input\r\n        placeholder={placeholder} // Set the placeholder text\r\n        className={className} // Set the input class\r\n        {...props} // Spread any additional props onto the input element\r\n      />\r\n    </div>\r\n  );\r\n}","import React from 'react'\r\n\r\nexport default function Button({\r\n    text,\r\n    type=\"button\",\r\n    className,\r\n    ...props\r\n}) {\r\n  return (\r\n    <button  className={`${className}`} {...props}>{text}</button>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from './Button';\r\nimport Input from './Input';\r\nimport { useNavigate, NavLink } from 'react-router-dom';\r\nimport Navbar from '../Navbar';\r\nimport Sidebar from '../Sidebar';\r\nimport { FaTachometerAlt } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport { jsPDF } from \"jspdf\";\r\nimport autoTable from 'jspdf-autotable';\r\nimport * as XLSX from 'xlsx';\r\nimport LoadingScreen from '../../Loading';\r\n\r\nexport default function CustomerList() {\r\n  const entries_options = [10, 20, 30, 40, 50];\r\n  const button = [\"Copy\", \"Excel\", \"PDF\", \"Print\", \"CSV\"];\r\n  const Navigate = useNavigate();\r\n\r\n  // State management\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [entriesPerPage, setEntriesPerPage] = useState(10);\r\n  const [search, setSearch] = useState('');\r\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\r\n  const [check, setCheckbox] = useState(false);\r\n  const [singleCheck, setSingleCheck] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [previousDue, setPreviousDue] = useState(0);\r\n  const [sales, setSales] = useState(0);\r\n  const [status, setStatus] = useState([]);\r\n  const [customerType, setCustomerType] = useState('offline');\r\n  const [offlineData, setOfflineData] = useState([]);\r\n  const [onlineData, setOnlineData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth < 768) {\r\n      setSidebarOpen(false);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch offline customers\r\n  const fetchOfflineData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get('api/customer-data/all', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        }\r\n      });\r\n      setOfflineData(response.data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch online customers\r\n  const fetchOnlineData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get('customer/customers', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        }\r\n      });\r\n      setOnlineData(response.data.data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOfflineData();\r\n    fetchOnlineData();\r\n  }, []);\r\n\r\n  // Determine which data to display based on customerType\r\n  const data = customerType === 'offline' ? offlineData : onlineData;\r\n\r\n  const filteredData = data.filter(item =>\r\n    (item.customerName || item.name)?.toLowerCase().includes(search.toLowerCase()) ||\r\n    item._id.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  const indexOfLastItem = currentPage * entriesPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - entriesPerPage;\r\n  const totalPages = Math.ceil(filteredData.length / entriesPerPage);\r\n  const currentUsers = filteredData.slice((currentPage - 1) * entriesPerPage, currentPage * entriesPerPage);\r\n\r\n  const calculate = () => {\r\n    if (customerType === 'offline') {\r\n      const totalCredit = currentUsers.reduce((sum, item) => sum + (item.creditLimit || 0), 0);\r\n      const totalPreviousDue = currentUsers.reduce((sum, item) => sum + (item.previousDue || 0), 0);\r\n      const salesreturn = currentUsers.reduce((sum, item) => sum + (item.salesReturnDue || 0), 0);\r\n      setTotal(totalCredit);\r\n      setPreviousDue(totalPreviousDue);\r\n      setSales(salesreturn);\r\n    } else {\r\n      setTotal(0);\r\n      setPreviousDue(0);\r\n      setSales(0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculate();\r\n  }, [data, filteredData, customerType]);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    if (newPage >= 1 && newPage <= totalPages)\r\n      setCurrentPage(newPage);\r\n  };\r\n\r\n  const handleEntriesChange = (e) => {\r\n    setEntriesPerPage(Number(e.target.value));\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    const dataToCopy = filteredData.map(item => \r\n      customerType === 'offline' \r\n        ? `${item._id}, ${item.customerName}, ${item.mobile},${item.email},${item.address?.locationLink || \"No Location link\"},${item.creditLimit},${item.previousDue},${item.salesReturnDue || 0},${item.advance},${status.includes(item._id) ? 'InActive' : 'Active'}`\r\n        : `${item._id}, ${item.name}, ${item.phone},${item.email},${item.city || \"N/A\"},0,0,0,0,${status.includes(item._id) ? 'InActive' : 'Active'}`\r\n    ).join('\\n');\r\n    navigator.clipboard.writeText(dataToCopy);\r\n    alert(\"Data copied to clipboard!\");\r\n  };\r\n\r\n  const handleExcelDownload = () => {\r\n    const dataToExport = filteredData.map(item => \r\n      customerType === 'offline' \r\n        ? {\r\n            ID: item._id,\r\n            Name: item.customerName,\r\n            Mobile: item.mobile,\r\n            Email: item.email,\r\n            Location: item.address?.locationLink || \"No Location link\",\r\n            CreditLimit: item.creditLimit,\r\n            PreviousDue: item.previousDue,\r\n            SalesReturnDue: item.salesReturnDue || 0,\r\n            Advance: item.advance,\r\n            Status: status.includes(item._id) ? 'InActive' : 'Active'\r\n          }\r\n        : {\r\n            ID: item._id,\r\n            Name: item.name,\r\n            Mobile: item.phone,\r\n            Email: item.email,\r\n            Location: item.city || \"N/A\",\r\n            CreditLimit: 0,\r\n            PreviousDue: 0,\r\n            SalesReturnDue: 0,\r\n            Advance: 0,\r\n            Status: status.includes(item._id) ? 'InActive' : 'Active'\r\n          }\r\n    );\r\n    const ws = XLSX.utils.json_to_sheet(dataToExport);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Customers\");\r\n    XLSX.writeFile(wb, \"customers.xlsx\");\r\n  };\r\n\r\n  const handlePdfDownload = () => {\r\n    const doc = new jsPDF();\r\n    doc.text(\"Customer List\", 20, 20);\r\n    const tableData = filteredData.map(item => \r\n      customerType === 'offline' \r\n        ? [\r\n            item._id,\r\n            item.customerName,\r\n            item.mobile,\r\n            item.email,\r\n            item.address?.locationLink || \"No Location link\",\r\n            item.creditLimit,\r\n            item.previousDue,\r\n            item.salesReturnDue || 0,\r\n            item.advance,\r\n            status.includes(item._id) ? 'InActive' : 'Active'\r\n          ]\r\n        : [\r\n            item._id,\r\n            item.name,\r\n            item.phone,\r\n            item.email,\r\n            item.city || \"N/A\",\r\n            0,\r\n            0,\r\n            0,\r\n            0,\r\n            status.includes(item._id) ? 'InActive' : 'Active'\r\n          ]\r\n    );\r\n\r\n    autoTable(doc, {\r\n      head: [['Customer Id', 'Customer Name', 'Mobile', 'Email', 'Location', 'Credit Limit', 'Previous Due', 'Sales return due', 'Advance', 'Status']],\r\n      body: tableData,\r\n    });\r\n\r\n    doc.save(\"customer_list.pdf\");\r\n  };\r\n\r\n  const handlePrint = () => {\r\n    window.print();\r\n  };\r\n\r\n  const handleCsvDownload = () => {\r\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \r\n      filteredData.map(item => \r\n        customerType === 'offline' \r\n          ? [item._id, item.customerName, item.mobile, item.email, item.address?.locationLink || \"No Location link\", item.creditLimit, item.previousDue, item.salesReturnDue || 0, item.advance, status.includes(item._id) ? 'InActive' : 'Active']\r\n          : [item._id, item.name, item.phone, item.email, item.city || \"N/A\", 0, 0, 0, 0, status.includes(item._id) ? 'InActive' : 'Active']\r\n      ).map(row => row.join(\",\")).join(\"\\n\");\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"customers.csv\");\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    const conf = window.confirm(\"Do you want to delete customer?\");\r\n    if (!conf) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      await axios.delete(`api/customer-data/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      });\r\n      alert(\"Deleted Successfully\");\r\n      fetchOfflineData();\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAction = (e, id) => {\r\n    const value = e.target.value;\r\n    if (value === \"edit\") Navigate(`/customer/add?id=${id}`);\r\n    if (value === \"delete\") handleDelete(id);\r\n    if (value === \"discount\") Navigate(`/create?customerid=${id}`);\r\n  };\r\n\r\n  const single = (id) => {\r\n    setSingleCheck((prev) => \r\n      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  if (loading) return <LoadingScreen />;\r\n  if (error) return <h1>Something Went Wrong...</h1>;\r\n\r\n  return (\r\n    <div className='flex flex-col overflow-x-hidden'>\r\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\r\n      \r\n      <div className='flex w-screen overflow-x-hidden'>\r\n        <Sidebar isSidebarOpen={isSidebarOpen} />\r\n        \r\n        <div className={`flex flex-col transition-all duration-300 p-2 w-full overflow-x-hidden`}>\r\n          <div className='flex flex-col items-start justify-between py-2 md:items-end md:flex-row'>\r\n            <div className='flex items-end gap-2 pl-2'> \r\n              <span className='text-3xl'>Customers List</span>\r\n              <span className='text-sm text-gray-700'>View / Search {customerType === 'offline' ? 'Offline' : 'Online'} Customers</span>               \r\n            </div>  \r\n            <div className='flex gap-2 pl-2 pr-2 mb-2 text-sm font-semibold text-black bg-gray-500 bg-opacity-50 rounded-md md:text-gray-500 md:justify-end md:bg-transparent'>\r\n              <NavLink to=\"/dashboard\" className=\"flex items-center text-gray-700 no-underline\"><FaTachometerAlt />Home</NavLink>\r\n              <span></span>\r\n              <NavLink to=\"/customer/import\" className=\"text-gray-700 no-underline\">Import Customers</NavLink>\r\n              <span></span>\r\n              <NavLink to=\"/customer/view\" className=\"text-gray-700 no-underline\">Customers</NavLink>                   \r\n            </div>\r\n          </div>\r\n\r\n          <div className='w-full mx-auto bg-white border-t-4 border-collapse rounded-lg shadow-md border-opacity-55 border-t-blue-600'>\r\n            <div className='flex flex-col items-center justify-start px-3 py-2 sm:justify-between sm:flex-row'>\r\n              <div className='flex items-center'>\r\n                <Input type=\"checkbox\" />\r\n                View Account Receivable Customers\r\n              </div>\r\n              <button className='flex-shrink-0 px-4 py-2 font-bold text-center text-white bg-blue-600 rounded cursor-pointer hover:bg-blue-700' \r\n                onClick={() => Navigate(customerType === 'offline' ? \"/customer/add\" : \"/customer/app/create\")}>\r\n                <span className='text-xl'>+</span>Create {customerType === 'offline' ? 'Offline' : 'Online'} Customer\r\n              </button>\r\n            </div>\r\n\r\n            <div className='flex border-b'>\r\n              <button \r\n                className={`flex-1 py-2 text-center ${customerType === 'offline' ? 'bg-blue-100 border-b-2 border-blue-600' : 'bg-gray-100'}`}\r\n                onClick={() => { setCustomerType('offline'); setCurrentPage(1); }}\r\n              >\r\n                Offline Customers\r\n              </button>\r\n              <button \r\n                className={`flex-1 py-2 text-center ${customerType === 'online' ? 'bg-blue-100 border-b-2 border-blue-600' : 'bg-gray-100'}`}\r\n                onClick={() => { setCustomerType('online'); setCurrentPage(1); }}\r\n              >\r\n                Online Customers\r\n              </button>\r\n            </div>\r\n\r\n            <div className=''>\r\n              <div className=\"flex flex-col justify-between mt-4 mb-4 space-y-2 md:flex-row md:space-y-0 md:items-center\">\r\n                <div className=\"flex items-center px-2 space-x-2\">\r\n                  <span className=\"text-sm\">Show</span>\r\n                  <select className=\"p-2 text-sm border border-gray-300 rounded-md\" value={entriesPerPage} onChange={handleEntriesChange}>\r\n                    {entries_options.map(option => (\r\n                      <option key={option} value={option}>{option}</option>\r\n                    ))}\r\n                  </select>\r\n                  <span className=\"text-sm\">Entries</span>\r\n                </div>\r\n                <div className=\"flex flex-col gap-2 md:flex-row\">\r\n                  <div className='flex items-center justify-between flex-1 gap-2 px-2'>\r\n                    {button.map((btn, index) => (\r\n                      <button \r\n                        key={index} \r\n                        onClick={() => {\r\n                          if (btn === \"Copy\") handleCopy();\r\n                          if (btn === \"Excel\") handleExcelDownload();\r\n                          if (btn === \"PDF\") handlePdfDownload();\r\n                          if (btn === \"Print\") handlePrint();\r\n                          if (btn === \"CSV\") handleCsvDownload();\r\n                        }} \r\n                        className=\"px-3 py-2 text-sm text-white bg-cyan-500\"\r\n                      >\r\n                        {btn}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                  <input \r\n                    type=\"text\" \r\n                    placeholder=\"Search\" \r\n                    className=\"w-full p-2 text-sm border border-gray-300 rounded-sm md:w-auto\" \r\n                    onChange={(e) => setSearch(e.target.value)} \r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className='w-full overflow-x-auto'>\r\n                <table className='w-full border-separate'>\r\n                  <thead className='text-sm'>\r\n                    <tr className=\"bg-gray-200\">\r\n                      <th className=\"px-4 py-2 text-left\">\r\n                        <Input type=\"checkbox\" id=\"table_head\" checked={check} onChange={() => setCheckbox(!check)} />\r\n                      </th>\r\n                      <th className=\"px-4 py-2 text-left\">CUSTOMER ID</th>\r\n                      <th className=\"px-4 py-2 text-left\">CUSTOMER Name</th>\r\n                      <th className=\"px-4 py-2\">Mobile</th>\r\n                      <th className=\"px-4 py-2 text-left\">Email</th>\r\n                      <th className=\"px-4 py-2 text-left\">Location</th>\r\n                      <th className=\"px-4 py-2 text-left\">Credit card limit</th>\r\n                      <th className=\"px-4 py-2 text-left\">Previous due</th>\r\n                      <th className=\"px-4 py-2 text-left\">Sales return due</th>\r\n                      <th className=\"px-4 py-2 text-left\">Status</th>\r\n                      {customerType === 'offline' && <th className=\"px-4 py-2 text-left\">Action</th>}\r\n                    </tr>\r\n                  </thead>\r\n\r\n                  <tbody className='border-gray-100 border-1'>\r\n                    {filteredData.length <= 0 && (\r\n                      <tr>\r\n                        <td className='px-4 py-2 text-center border-gray-100 border-1' colSpan={customerType === 'offline' ? '11' : '10'}>No Data Available</td>\r\n                      </tr>\r\n                    )}\r\n                    {filteredData.slice((currentPage - 1) * entriesPerPage, currentPage * entriesPerPage).map((item, index) => (\r\n                      <tr key={index}>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>\r\n                          <Input type=\"checkbox\" id=\"table_body\" checked={check || singleCheck.includes(item._id)} onChange={() => single(item._id)} />\r\n                        </td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{item._id}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{customerType === 'offline' ? item.customerName : item.name}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{customerType === 'offline' ? item.mobile : item.phone}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{item.email || 'N/A'}</td>\r\n                        <td className='px-2 py-2 border-gray-100 border-1'>\r\n                          {customerType === 'offline' ? (item.address?.locationLink || \"No Location link\") : (item.city || \"N/A\")}\r\n                        </td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{customerType === 'offline' ? item.creditLimit : 0}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{customerType === 'offline' ? item.previousDue : 0}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1'>{customerType === 'offline' ? (item.salesReturnDue || 0) : 0}</td>\r\n                        <td className='px-4 py-2 border-gray-100 border-1' \r\n                            onClick={() => setStatus((prev) => \r\n                              prev.includes(item._id) ? prev.filter((id) => id !== item._id) : [...prev, item._id]\r\n                            )}>\r\n                          {status.includes(item._id) ? (\r\n                            <span className=\"p-1 text-white bg-red-700 rounded-md\">Inactive</span>\r\n                          ) : (\r\n                            <span className=\"p-1 text-white bg-green-400 rounded-md\">Active</span>\r\n                          )}\r\n                        </td>\r\n                        {customerType === 'offline' && (\r\n                          <td className='py-2 border-gray-100 border-1'>\r\n                            <select className='py-1 text-sm border rounded-sm' onChange={(e) => handleAction(e, item._id)}>\r\n                              <option value=\"\" selected disabled>Actions</option>\r\n                              <option value=\"discount\">Generate Discount Coupon</option>\r\n                              <option value=\"edit\">Edit</option>\r\n                              <option value=\"view\">View Payment</option>\r\n                              <option value=\"delete\">Delete</option>\r\n                            </select>\r\n                          </td>\r\n                        )}\r\n                      </tr>\r\n                    ))}\r\n                    {filteredData.length > 0 && customerType === 'offline' && (\r\n                      <tr>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        <td className='px-4 py-2 font-bold text-right bg-gray-200'>Total:</td>\r\n                        <td className='px-4 py-2 bg-gray-200'>{total}</td>\r\n                        <td className='px-4 py-2 bg-gray-200'>{previousDue}</td>\r\n                        <td className='px-4 py-2 bg-gray-200'>{sales}</td>\r\n                        <td className='px-4 py-2 bg-gray-200'></td>\r\n                        {customerType === 'offline' && <td className='px-4 py-2 bg-gray-200'></td>}\r\n                      </tr>\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <div className=\"flex flex-col items-start justify-between gap-2 p-2 md:justify-between md:flex-row\">\r\n                <span>\r\n                  Showing {entriesPerPage * (currentPage - 1) + 1} to {Math.min(entriesPerPage * currentPage, filteredData.length)} of {filteredData.length} entries\r\n                </span>\r\n                <div className='flex justify-between w-full md:w-auto md:gap-2'>\r\n                  <button\r\n                    className={`flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-200 shadow-md \r\n                      ${currentPage === 1 ? \"bg-gray-300 text-gray-500 cursor-not-allowed\" : \"bg-blue-500 hover:bg-blue-600 text-white cursor-pointer\"}`}\r\n                    onClick={() => handlePageChange(currentPage - 1)}\r\n                    disabled={currentPage === 1}\r\n                  >\r\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19l-7-7 7-7\" />\r\n                    </svg>\r\n                    Previous\r\n                  </button>\r\n                  <button\r\n                    className={`flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-200 shadow-md \r\n                      ${(currentPage === totalPages || totalPages === 0) ? \"bg-gray-300 text-gray-500 cursor-not-allowed\" : \"bg-blue-500 hover:bg-blue-600 text-white cursor-pointer\"}`}\r\n                    onClick={() => handlePageChange(currentPage + 1)}\r\n                    disabled={currentPage === totalPages || totalPages === 0}\r\n                  >\r\n                    Next\r\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9 5l7 7-7 7\" />\r\n                    </svg>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":["LoadingScreen","isSidebarOpen","setSidebarOpen","useState","_jsxs","className","children","_jsx","Navbar","Sidebar","Input","_ref","id","type","label_class","label","placeholder","div_class","props","ID","useId","htmlFor","Button","text","CustomerList","Navigate","useNavigate","loading","setLoading","error","setError","currentPage","setCurrentPage","entriesPerPage","setEntriesPerPage","search","setSearch","check","setCheckbox","singleCheck","setSingleCheck","total","setTotal","previousDue","setPreviousDue","sales","setSales","status","setStatus","customerType","setCustomerType","offlineData","setOfflineData","onlineData","setOnlineData","useEffect","window","innerWidth","fetchOfflineData","async","response","axios","get","headers","Authorization","localStorage","getItem","data","err","message","fetchOnlineData","filteredData","filter","item","customerName","name","toLowerCase","includes","_id","totalPages","Math","ceil","length","currentUsers","slice","calculate","totalCredit","reduce","sum","creditLimit","totalPreviousDue","salesreturn","salesReturnDue","handlePageChange","newPage","handleAction","e","value","target","confirm","delete","alert","console","handleDelete","NavLink","to","FaTachometerAlt","onClick","onChange","Number","map","option","btn","index","handleCopy","dataToCopy","_item$address","mobile","email","address","locationLink","advance","phone","city","join","navigator","clipboard","writeText","handleExcelDownload","dataToExport","_item$address2","Name","Mobile","Email","Location","CreditLimit","PreviousDue","SalesReturnDue","Advance","Status","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","handlePdfDownload","doc","jsPDF","tableData","_item$address3","autoTable","head","body","save","print","handleCsvDownload","csvContent","_item$address4","row","encodedUri","encodeURI","link","document","createElement","setAttribute","appendChild","click","removeChild","checked","colSpan","_item$address5","single","prev","selected","disabled","min","fill","stroke","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}