{"version":3,"file":"static/js/9289.2241449a.chunk.js","mappings":"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","sources":["Loading.jsx","components/contact/Button.jsx","components/DeliverySlot/TimePicker.jsx","components/DeliverySlot/DeliverySlotCreate.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nexport default function LoadingScreen() {\n    const[isSidebarOpen,setSidebarOpen]=useState(false)\n    return (\n        <div className='flex flex-col h-screen'>\n        {/* Navbar component with sidebar open state */}\n        <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n        <div className='flex flex-grow mt-20'>\n          <div>\n            {/* Sidebar component with open state */}\n            <Sidebar isSidebarOpen={isSidebarOpen} />\n          </div>\n  \n          {/* Container for the entire component */}\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 rounded-full border-cyan-500 border-t-transparent animate-spin\"></div>\n            <p className=\"mt-3 text-lg font-semibold text-gray-700\">Loading...</p>\n          </div>\n        </div>\n          \n        </div>\n      </div>\n    );\n  }\n  ","import React from 'react'\r\n\r\nexport default function Button({\r\n    text,\r\n    type=\"button\",\r\n    className,\r\n    ...props\r\n}) {\r\n  return (\r\n    <button  className={`${className}`} {...props}>{text}</button>\r\n  )\r\n}\r\n","import { useState, useRef, useEffect } from 'react';\r\n\r\nconst TimePicker = ({ label, value, onChange, minTime }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [hours, setHours] = useState('00');\r\n  const [minutes, setMinutes] = useState('00');\r\n  const [period, setPeriod] = useState('AM');\r\n  const timePickerRef = useRef(null);\r\n\r\n  // Parse initial value\r\n  useEffect(() => {\r\n    if (value) {\r\n      const [time, mod] = value.split(' ');\r\n      const [h, m] = time.split(':');\r\n      setHours(h.padStart(2, '0'));\r\n      setMinutes(m.padStart(2, '0'));\r\n      setPeriod(mod || 'AM');\r\n    }\r\n  }, [value]);\r\n\r\n  // Close when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (e) => {\r\n      if (timePickerRef.current && !timePickerRef.current.contains(e.target)) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const handleTimeChange = (newHours, newMinutes, newPeriod) => {\r\n    const formattedTime = `${newHours}:${newMinutes} ${newPeriod}`;\r\n    onChange(formattedTime);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full\" ref={timePickerRef}>\r\n      <label className=\"block mb-1 text-sm font-medium text-gray-700\">\r\n        {label}\r\n      </label>\r\n      <div\r\n        className=\"flex items-center justify-between px-4 py-3 transition-colors bg-white border border-gray-300 rounded-lg cursor-pointer hover:border-blue-400\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n      >\r\n        <span className=\"text-gray-800\">\r\n          {value || 'Select time'}\r\n        </span>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"w-5 h-5 text-gray-400\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n        </svg>\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div className=\"absolute z-10 w-full mt-1 overflow-hidden bg-white border border-gray-200 rounded-lg shadow-lg\">\r\n          <div className=\"flex p-4 border-b bg-gray-50\">\r\n            <div className=\"flex-1 text-lg font-medium text-center text-gray-800\">\r\n              {hours}:{minutes} {period}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex divide-x divide-gray-200\">\r\n            {/* Hours */}\r\n            <div className=\"flex-1 py-2 overflow-y-auto max-h-48\">\r\n              {Array.from({ length: 12 }, (_, i) => {\r\n                const h = (i + 1).toString().padStart(2, '0');\r\n                return (\r\n                  <div\r\n                    key={`hour-${h}`}\r\n                    className={`px-4 py-2 text-center cursor-pointer hover:bg-blue-50 ${\r\n                      hours === h ? 'bg-blue-100 text-blue-600' : 'text-gray-700'\r\n                    }`}\r\n                    onClick={() => setHours(h)}\r\n                  >\r\n                    {h}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            \r\n            {/* Minutes */}\r\n            <div className=\"flex-1 py-2 overflow-y-auto max-h-48\">\r\n              {Array.from({ length: 60 }, (_, i) => {\r\n                const m = i.toString().padStart(2, '0');\r\n                return (\r\n                  <div\r\n                    key={`minute-${m}`}\r\n                    className={`px-4 py-2 text-center cursor-pointer hover:bg-blue-50 ${\r\n                      minutes === m ? 'bg-blue-100 text-blue-600' : 'text-gray-700'\r\n                    }`}\r\n                    onClick={() => setMinutes(m)}\r\n                  >\r\n                    {m}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            \r\n            {/* AM/PM */}\r\n            <div className=\"flex-1 py-2\">\r\n              {['AM', 'PM'].map((p) => (\r\n                <div\r\n                  key={`period-${p}`}\r\n                  className={`px-4 py-2 text-center cursor-pointer hover:bg-blue-50 ${\r\n                    period === p ? 'bg-blue-100 text-blue-600' : 'text-gray-700'\r\n                  }`}\r\n                  onClick={() => setPeriod(p)}\r\n                >\r\n                  {p}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"flex justify-end p-3 border-t bg-gray-50\">\r\n            <button\r\n              className=\"px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-800\"\r\n              onClick={() => setIsOpen(false)}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              className=\"px-4 py-2 ml-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\r\n              onClick={() => handleTimeChange(hours, minutes, period)}\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimePicker;","import React, { useEffect, useState } from \"react\";\r\nimport { BiChevronDown, BiChevronUp, BiX, BiChevronRight } from \"react-icons/bi\";\r\nimport { FaTachometerAlt } from \"react-icons/fa\";\r\nimport Navbar from \"../Navbar.jsx\";\r\nimport Sidebar from \"../Sidebar.jsx\";\r\nimport axios from \"axios\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport LoadingScreen from \"../../Loading.jsx\";\r\nimport Button from \"../contact/Button.jsx\";\r\nimport TimePicker from \"./TimePicker.jsx\"\r\nconst DeliverySlotCreate = () => {\r\n  const[isSidebarOpen,setSidebarOpen]=useState(true)\r\n  const[loading,setLoading]=useState(false)\r\n \r\n \r\n  useEffect(()=>{\r\n    if(window.innerWidth < 768){\r\n      setSidebarOpen(false)\r\n    }\r\n  },[window.innerWidth])\r\n\r\n  const[formData,setFormData]=useState({\r\n    startTime:\"\",\r\n    endTime:\"\",\r\n    fee:0\r\n  })\r\n\r\nuseEffect(()=>console.log(formData),[formData])\r\n\r\n\r\nconst handleSubmit=async (e)=>{\r\n    e.preventDefault();\r\n    try{\r\n        const response =await axios.post('api/delivery/slot/create',formData)\r\n        console.log(response)\r\n        alert(\"slot created successfully\")\r\n        setFormData({\r\n             startTime:\"\",\r\n    endTime:\"\",\r\n    fee:0\r\n        })\r\n    }\r\n    catch(error){\r\n        console.error(\"Error in creating slot\",error.message)\r\n    }\r\n}\r\nconst handleReset=(e)=>{\r\n    e.preventDefault();\r\n     setFormData({\r\n             startTime:\"\",\r\n    endTime:\"\",\r\n    fee:0\r\n        })\r\n}\r\n\r\n   \r\n   if(loading) return (<LoadingScreen />)\r\n  return (\r\n    <div className=\"flex flex-col h-screen\">\r\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\r\n      <div className=\"flex flex-grow \">\r\n\r\n        <Sidebar isSidebarOpen={isSidebarOpen} />\r\n          \r\n           {/* Content */}\r\n         <div className={`flex-grow flex flex-col p-2 md:p-2  `}>\r\n          <header className=\"flex flex-col items-center justify-between p-4 rounded-md shadow lg:flex-row\">\r\n            <div className=\"flex items-center gap-1 text-center sm:flex-row sm:text-left\">\r\n              <h1 className=\"text-lg font-semibold truncate sm:text-xl\">New Delivery Slot</h1>\r\n              <span className=\"text-xs text-gray-600 sm:text-sm\">Add/Update Delivery Slot</span>\r\n            </div>\r\n\r\n            <nav className=\"flex flex-wrap items-center justify-center mt-2 text-xs text-gray-500 sm:justify-start sm:text-sm sm:mt-0\">\r\n   <NavLink to=\"/dashboard\" className=\"flex items-center text-gray-700 no-underline hover:text-cyan-600\">\r\n                            <FaTachometerAlt className=\"mr-2 text-gray-500 hover:text-cyan-600\" /> Home\r\n                          </NavLink>     \r\n                          <NavLink to=\"/delivery-slot/view\" className=\"flex items-center text-gray-700 no-underline hover:text-cyan-600\">\r\n                           &gt; Delivery Slot List\r\n                          </NavLink>    \r\n                          <NavLink to=\"/delivery-slot/create\" className=\"text-gray-700 no-underline hover:text-cyan-600\">\r\n                           &gt; Add Delivery Slot List\r\n                          </NavLink>\r\n              \r\n            </nav>\r\n          </header>\r\n          <form onSubmit={handleSubmit} onReset={handleReset}>\r\n            \r\n        \r\n          <div className=\"p-4 mt-1 bg-white border-t-4 rounded-lg shadow-md border-cyan-500\">\r\n             \r\n          <div className=\"flex flex-col gap-5 md:flex-row\">\r\n      <TimePicker\r\n        label=\"Start Time\"\r\n        value={formData.startTime}\r\n        onChange={(time) => setFormData((prev)=>({...prev,startTime:time}))}\r\n      />\r\n      \r\n      <TimePicker\r\n        label=\"End Time\"\r\n        value={formData.endTime}\r\n        onChange={(time) => setFormData((prev)=>({...prev,endTime:time}))}\r\n      />\r\n    </div>\r\n\r\n<div className=\"flex justify-between w-full gap-5\">\r\n  <div className=\"flex flex-col w-full gap-1\">\r\n    <label htmlFor=\"fee\">Fee</label>\r\n    <input\r\n      type=\"number\"\r\n      name=\"fee\"\r\n      id=\"fee\"\r\n      min=\"0\"\r\n      value={formData.fee}\r\n      onChange={(e)=>setFormData((prev)=>({...prev,fee:Number(e.target.value)}))}\r\n      defaultValue=\"0\"\r\n      className=\"w-full px-2 py-2 border-2 rounded-md\"\r\n    />\r\n  </div>\r\n  <div className=\"flex flex-col w-full gap-1\">\r\n    {/* Empty div maintained for layout consistency */}\r\n  </div>\r\n</div>\r\n\r\n               <div className='flex flex-col items-center justify-around w-full gap-2 mx-auto mt-5 sm:flex-row'>\r\n                              <Button className=\"w-full text-white bg-green-500 rounded cursor-pointer hover:bg-green-600\" type='submit' text=\"Save\"/> {/* Save button */}\r\n                              <Button className=\"w-full text-white bg-orange-500 rounded cursor-pointer hover:bg-orange-600\" text=\"Reset\" type='reset' /> {/* Close button */}\r\n         </div>\r\n               \r\n               \r\n                \r\n                \r\n                 \r\n          \r\n            </div>\r\n\r\n             </form> \r\n          </div>\r\n        </div>\r\n      </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default DeliverySlotCreate;\r\n"],"names":["LoadingScreen","isSidebarOpen","setSidebarOpen","useState","_jsxs","className","children","_jsx","Navbar","Sidebar","Button","_ref","text","type","props","label","value","onChange","minTime","isOpen","setIsOpen","hours","setHours","minutes","setMinutes","period","setPeriod","timePickerRef","useRef","useEffect","time","mod","split","h","m","padStart","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","ref","onClick","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Array","from","length","_","i","toString","map","p","DeliverySlotCreate","loading","setLoading","window","innerWidth","formData","setFormData","startTime","endTime","fee","console","log","NavLink","to","FaTachometerAlt","onSubmit","async","preventDefault","response","axios","post","alert","error","message","onReset","TimePicker","prev","htmlFor","name","id","min","Number","defaultValue"],"sourceRoot":""}