{"version":3,"file":"static/js/9227.efb8b3cc.chunk.js","mappings":"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","sources":["Loading.jsx","components/store/AddSubscription.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nexport default function LoadingScreen() {\n    const[isSidebarOpen,setSidebarOpen]=useState(false)\n    return (\n        <div className='flex flex-col h-screen'>\n        {/* Navbar component with sidebar open state */}\n        <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n        <div className='flex flex-grow mt-20'>\n          <div>\n            {/* Sidebar component with open state */}\n            <Sidebar isSidebarOpen={isSidebarOpen} />\n          </div>\n  \n          {/* Container for the entire component */}\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 rounded-full border-cyan-500 border-t-transparent animate-spin\"></div>\n            <p className=\"mt-3 text-lg font-semibold text-gray-700\">Loading...</p>\n          </div>\n        </div>\n          \n        </div>\n      </div>\n    );\n  }\n  ","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../Navbar\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport LoadingScreen from \"../../Loading\";\r\n\r\nfunction AddSubscription() {\r\n  const navigate = useNavigate();\r\n  // Use useParams() to extract the subscription id from the route.\r\n  const { id: subscriptionId } = useParams();\r\n  // Still use searchParams for storeId.\r\n  const [searchParams] = useSearchParams();\r\n  const storeId = searchParams.get(\"storeId\"); \r\n\r\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Dropdown options for package name (used in the Package Name dropdown)\r\n  const packageTypeOptions = [\r\n    { label: \"Free\", value: \"free\" },\r\n    { label: \"Regular\", value: \"regular\" },\r\n    { label: \"Ultimate\", value: \"ultimate\" },\r\n  ];\r\n\r\n  // Dropdown options for monthly price presets (we use the backend field \"category\" to store this numeric value)\r\n  const monthlyPriceOptions = [\r\n    { label: \"250 Monthly\", value: 250 },\r\n    { label: \"2000 Annually\", value: 2000 },\r\n  ];\r\n\r\n  // Dropdown options for package count (duration in months)\r\n  const productCountOptions = Array.from({ length: 12 }, (_, i) => i + 1);\r\n\r\n  // Payment types will be fetched from the API.\r\n  const [paymentTypes, setPaymentTypes] = useState([]);\r\n  const paymentTypePlaceholder = { label: \"Select Payment Type\", value: \"\" };\r\n\r\n  // Initial form state.\r\n  // Note:\r\n  // • \"store\" will be set automatically from the query parameter.\r\n  // • \"packageName\" holds the chosen package option.\r\n  // • \"category\" holds the numeric monthly price.\r\n  const [formData, setFormData] = useState({\r\n    store: \"\",\r\n    packageName: \"\", \r\n    category: \"\",\r\n    productCount: \"1\",\r\n    description: \"\",\r\n    total: 0,\r\n    paymentType: \"\",\r\n    status: \"active\",\r\n    startDate: \"\",\r\n    endDate: \"\"\r\n  });\r\n\r\n  // Set the store from query params if available.\r\n  useEffect(() => {\r\n    if (storeId) {\r\n      setFormData(prev => ({ ...prev, store: storeId }));\r\n    }\r\n  }, [storeId]);\r\n\r\n  // Fetch Payment Types from the API.\r\n  useEffect(() => {\r\n    const fetchPaymentTypes = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        const res = await axios.get(\"api/payment-types\", {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        // Assuming API returns an array of payment type objects under res.data.data\r\n        setPaymentTypes(res.data.data || []);\r\n      } catch (error) {\r\n        console.error(\"Error fetching payment types:\", error.message);\r\n      }\r\n    };\r\n    fetchPaymentTypes();\r\n  }, []);\r\n\r\n  // Automatically recalculate total whenever the monthly price (stored in \"category\") or product count changes.\r\n  useEffect(() => {\r\n    const price = parseFloat(formData.category) || 0;\r\n    const count = parseInt(formData.productCount, 10) || 0;\r\n    setFormData(prev => ({ ...prev, total: price * count }));\r\n  }, [formData.category, formData.productCount]);\r\n\r\n  // If editing, fetch the existing subscription details.\r\n  useEffect(() => {\r\n    if (subscriptionId) {\r\n      fetchSubscription(subscriptionId);\r\n    }\r\n  }, [subscriptionId]);\r\n\r\n  const fetchSubscription = async (id) => {\r\n    setLoading(true);\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const res = await axios.get(`api/subscriptions/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      const data = res.data.data;\r\n      setFormData({\r\n        // If store is an object, use its _id; otherwise, use it as-is.\r\n        store: data.store && typeof data.store === \"object\" ? data.store._id : data.store || \"\",\r\n        packageName: data.packageName || \"\",\r\n        category: data.category || \"\",\r\n        productCount: data.productCount ? data.productCount.toString() : \"1\",\r\n        description: data.description || \"\",\r\n        total: data.total || 0,\r\n        paymentType: data.paymentType?._id ||  data.paymentType || \"\",\r\n        status: data.status || \"active\",\r\n        startDate: data.startDate ? data.startDate.split(\"T\")[0] : \"\",\r\n        endDate: data.endDate ? data.endDate.split(\"T\")[0] : \"\"\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error fetching subscription:\", error.message);\r\n      alert(\"Error fetching subscription data.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const headers = { Authorization: `Bearer ${token}` };\r\n      const payload = { ...formData };\r\n\r\n      if (subscriptionId) {\r\n        // Update existing subscription.\r\n       const response= await axios.put(`api/subscriptions/${subscriptionId}`, payload, { headers });\r\n        alert(\"Subscription updated successfully!\");\r\n        console.log(response.data)\r\n      } else {\r\n        // Create new subscription.\r\n        await axios.post(\"api/subscriptions\", payload, { headers });\r\n        alert(\"Subscription created successfully!\");\r\n      }\r\n      // Navigate back to the subscription list while preserving the storeId in the URL.\r\n      navigate(`/subscription-list?storeId=${storeId}`);\r\n    } catch (error) {\r\n      console.error(\"Error submitting subscription:\", error.message);\r\n      alert(\"Error submitting subscription.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <LoadingScreen />;\r\n\r\n  return (\r\n    <div className=\"flex flex-col bg-gray-100\">\r\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\r\n      <div className=\"flex flex-grow\">\r\n        <div>\r\n          \r\n        <Sidebar isSidebarOpen={isSidebarOpen} />\r\n        </div>\r\n        <div className={`flex-grow p-6  transition-all duration-300 w-full`}>\r\n          <header className=\"flex flex-col items-center justify-between mb-6 md:flex-row\">\r\n            <h2 className=\"text-2xl font-bold\">\r\n              {subscriptionId ? \"Edit Subscription\" : \"Add Subscription\"}\r\n            </h2>\r\n            <nav className=\"flex items-center text-sm text-gray-500\">\r\n              <a href=\"/dashboard\" className=\"flex items-center text-gray-700 no-underline hover:text-cyan-600\">\r\n                <i className=\"mr-2 fas fa-tachometer-alt\"></i> Home\r\n              </a>\r\n              <span className=\"mx-2\">/</span>\r\n              <a href={`/subscription-list?storeId=${storeId}`} className=\"text-gray-700 no-underline hover:text-cyan-600\">\r\n                Subscription List\r\n              </a>\r\n            </nav>\r\n          </header>\r\n\r\n          <div className=\"p-6 bg-white rounded shadow-md \">\r\n            <form onSubmit={handleSubmit}>\r\n              {/* Package Name as a Dropdown for Package Option */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Package Name</label>\r\n                <select\r\n                  name=\"packageName\"\r\n                  value={formData.packageName}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Package</option>\r\n                  {packageTypeOptions.map((option) => (\r\n                    <option key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Monthly Price Dropdown */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Monthly Price</label>\r\n                <select\r\n                  name=\"category\"\r\n                  value={formData.category}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                  required\r\n                >\r\n                  <option value=\"\">Select Price</option>\r\n                  {monthlyPriceOptions.map((option) => (\r\n                    <option key={option.value} value={option.value}>\r\n                      {option.label}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Package Count Dropdown (Duration in months) */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Package Count (months)</label>\r\n                <select\r\n                  name=\"productCount\"\r\n                  value={formData.productCount}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                  required\r\n                >\r\n                  {productCountOptions.map((num) => (\r\n                    <option key={num} value={num}>\r\n                      {num}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Total Amount (Calculated Automatically) */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Total</label>\r\n                <input\r\n                  type=\"number\"\r\n                  name=\"total\"\r\n                  value={formData.total}\r\n                  readOnly\r\n                  className=\"w-full p-2 bg-gray-100 border border-gray-300 rounded\"\r\n                />\r\n              </div>\r\n\r\n              {/* Payment Type Dropdown (Populated from API) */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Payment Type</label>\r\n                <select\r\n                  name=\"paymentType\"\r\n                  value={formData.paymentType || formData.paymentType?._id}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                  required\r\n                >\r\n                  <option value=\"\">{paymentTypePlaceholder.label}</option>\r\n                  {paymentTypes.map((pt) => (\r\n                    <option key={pt._id} value={pt._id}>\r\n                      {pt.paymentTypeName}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Subscription Status */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Subscription Status</label>\r\n                <select\r\n                  name=\"status\"\r\n                  value={formData.status}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                >\r\n                  <option value=\"active\">Active</option>\r\n                  <option value=\"inactive\">Inactive</option>\r\n                  <option value=\"expired\">Expired</option>\r\n                </select>\r\n              </div>\r\n\r\n              {/* Start Date */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Start Date</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  value={formData.startDate}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              {/* End Date */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">End Date</label>\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  value={formData.endDate}\r\n                  onChange={handleChange}\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                />\r\n              </div>\r\n\r\n              {/* Description */}\r\n              <div className=\"mb-4\">\r\n                <label className=\"block mb-2 font-semibold\">Description</label>\r\n                <textarea\r\n                  name=\"description\"\r\n                  value={formData.description}\r\n                  onChange={handleChange}\r\n                  rows=\"4\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded\"\r\n                ></textarea>\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-2\">\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"px-4 py-2 text-white transition-colors bg-green-500 rounded hover:bg-green-600\"\r\n                >\r\n                  {subscriptionId ? \"Update Subscription\" : \"Create Subscription\"}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => navigate(\"/subscription-list?storeId=\" + storeId)}\r\n                  className=\"px-4 py-2 text-white bg-orange-500 rounded hover:bg-orange-600\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddSubscription;\r\n"],"names":["LoadingScreen","isSidebarOpen","setSidebarOpen","useState","_jsxs","className","children","_jsx","Navbar","Sidebar","_formData$paymentType","navigate","useNavigate","id","subscriptionId","useParams","searchParams","useSearchParams","storeId","get","loading","setLoading","productCountOptions","Array","from","length","_","i","paymentTypes","setPaymentTypes","formData","setFormData","store","packageName","category","productCount","description","total","paymentType","status","startDate","endDate","useEffect","prev","async","token","localStorage","getItem","res","axios","headers","Authorization","data","error","console","message","fetchPaymentTypes","price","parseFloat","count","parseInt","fetchSubscription","_data$paymentType","_id","toString","split","alert","handleChange","e","name","value","target","href","onSubmit","preventDefault","payload","response","put","log","post","onChange","required","label","map","option","num","type","readOnly","pt","paymentTypeName","rows","onClick"],"sourceRoot":""}