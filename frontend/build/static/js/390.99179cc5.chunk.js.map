{"version":3,"file":"static/js/390.99179cc5.chunk.js","mappings":"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","sources":["Loading.jsx","components/User/CreateUser.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Sidebar from \"./components/Sidebar\";\nexport default function LoadingScreen() {\n    const[isSidebarOpen,setSidebarOpen]=useState(false)\n    return (\n        <div className='flex flex-col h-screen'>\n        {/* Navbar component with sidebar open state */}\n        <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n        <div className='flex flex-grow mt-20'>\n          <div>\n            {/* Sidebar component with open state */}\n            <Sidebar isSidebarOpen={isSidebarOpen} />\n          </div>\n  \n          {/* Container for the entire component */}\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-white/80 backdrop-blur-sm\">\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-12 h-12 border-4 rounded-full border-cyan-500 border-t-transparent animate-spin\"></div>\n            <p className=\"mt-3 text-lg font-semibold text-gray-700\">Loading...</p>\n          </div>\n        </div>\n          \n        </div>\n      </div>\n    );\n  }\n  ","// src/components/CreateUser.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { NavLink, useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"../Navbar\";\r\nimport Sidebar from \"../Sidebar\";\r\nimport LoadingScreen from \"../../Loading\";\r\nimport { FaTachometerAlt } from \"react-icons/fa\";\r\nimport { BiChevronRight } from \"react-icons/bi\";\r\n\r\nconst CreateUser = () => {\r\n  const [searchParams] = useSearchParams();\r\n  const editId = searchParams.get(\"id\");\r\n  const navigate = useNavigate();\r\n\r\n  // ── 1) Decode token to detect admin ─────────────────────────────\r\n  const token = localStorage.getItem(\"token\") || \"\";\r\n  let isAdminUser = false;\r\n  if (token) {\r\n    try {\r\n      const payload = JSON.parse(window.atob(token.split(\".\")[1]));\r\n      isAdminUser = payload.role === \"admin\";\r\n    } catch (e) {\r\n      console.error(\"Failed to parse token:\", e);\r\n    }\r\n  }\r\n\r\n  // ── 2) Sidebar toggling ────────────────────────────────────────\r\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\r\n  useEffect(() => {\r\n    if (window.innerWidth < 768) setSidebarOpen(false);\r\n  }, []);\r\n\r\n  // ── 3) Lookup data ─────────────────────────────────────────────\r\n  const [roles, setRoles] = useState([]);\r\n  const [warehouses, setWarehouses] = useState([]);\r\n  const [stores, setStores] = useState([]);\r\n\r\n  // ── 4) Form state ──────────────────────────────────────────────\r\n  const [formData, setFormData] = useState({\r\n    userName: \"\",\r\n    FirstName: \"\",\r\n    LastName: \"\",\r\n    Mobile: \"\",\r\n    Email: \"\",\r\n    Role: \"\",\r\n    Store: isAdminUser ? [] : [],     // admins pick; non-admins get forced later\r\n  });\r\n  const [warehouseGroup, setWarehouseGroup] = useState([]);\r\n  const [defaultWarehouse, setDefaultWarehouse] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confPassword, setConfPassword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"active\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const headers = { Authorization: `Bearer ${token}` };\r\n\r\n  // ── 5) Fetch roles, warehouses, stores ─────────────────────────\r\n  useEffect(() => {\r\n    if (!token) return navigate(\"/\");\r\n    axios\r\n      .get(\"admincreatingrole/api/roles\", { headers })\r\n      .then(r => setRoles(r.data.roles || []))\r\n      .catch(console.error);\r\n\r\n    axios\r\n      .get(\"api/warehouses\", { headers })\r\n      .then(r => setWarehouses(r.data.data || []))\r\n      .catch(console.error);\r\n\r\n    axios\r\n      .get(\"admin/store/add/store\", { headers })\r\n      .then(r => setStores(r.data.result || []))\r\n      .catch(console.error);\r\n  }, [navigate, token]);\r\n\r\n  // ── 6) If editing, preload existing user ────────────────────────\r\n  useEffect(() => {\r\n    if (!editId) return;\r\n    setLoading(true);\r\n    axios\r\n      .get(\"admiaddinguser/userlist\", { headers })\r\n      .then(res => {\r\n        const u = res.data.find(x => x._id === editId);\r\n        if (!u) return;\r\n        setFormData({\r\n          userName: u.userName || \"\",\r\n          FirstName: u.FirstName || \"\",\r\n          LastName: u.LastName || \"\",\r\n          Mobile: u.Mobile || \"\",\r\n          Email: u.Email || \"\",\r\n          Role: u.Role || \"\",\r\n          Store: u.Store.map(s => s._id) || [],\r\n        });\r\n        setWarehouseGroup(u.WarehouseGroup || []);\r\n        setDefaultWarehouse(u.Defaultwarehouse || \"\");\r\n        setStatus(u.status || \"active\");\r\n      })\r\n      .catch(console.error)\r\n      .finally(() => setLoading(false));\r\n  }, [editId, token]);\r\n\r\n  // ── 7) Handlers ────────────────────────────────────────────────\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    setFormData(f => ({ ...f, [name]: value }));\r\n  };\r\n\r\n  const addWarehouse = id => {\r\n    if (id && !warehouseGroup.includes(id)) {\r\n      setWarehouseGroup(w => [...w, id]);\r\n    }\r\n  };\r\n  const removeWarehouse = id => {\r\n    setWarehouseGroup(w => w.filter(x => x !== id));\r\n    if (defaultWarehouse === id) setDefaultWarehouse(\"\");\r\n  };\r\n\r\n  const addStore = id => {\r\n    if (id && !formData.Store.includes(id)) {\r\n      setFormData(f => ({ ...f, Store: [...f.Store, id] }));\r\n    }\r\n  };\r\n  const removeStore = id => {\r\n    setFormData(f => ({ ...f, Store: f.Store.filter(s => s !== id) }));\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    if (password || confPassword) {          // validate only when provided\r\n   if (password !== confPassword) {\r\n      return alert(\"Passwords do not match\");\r\n   }\r\n  }\r\n    setLoading(true);\r\n    const payload = {\r\n   ...formData,\r\n   WarehouseGroup: warehouseGroup,\r\n   Defaultwarehouse: defaultWarehouse,\r\n   status,\r\n };\r\n if (password.trim()) {\r\n   payload.Password = password.trim();     // attach only if user typed one\r\n }\r\n    try {\r\n      if (editId) {\r\n        await axios.put(\r\n          `admiaddinguser/${editId}`,\r\n          payload,\r\n          { headers }\r\n        );\r\n        alert(\"User updated\");\r\n      } else {\r\n        await axios.post(\r\n          \"admiaddinguser/adduserbyadmin\",\r\n          payload,\r\n          { headers }\r\n        );\r\n        alert(\"User created\");\r\n      }\r\n      navigate(\"/admin/user/list\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(err.response?.data?.message || \"Error saving user\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <LoadingScreen />;\r\n\r\n  // ── 8) Render ─────────────────────────────────────────────────\r\n  return (\r\n    <div className=\"flex flex-col h-screen\">\r\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\r\n      <div className=\"flex flex-grow\">\r\n        <Sidebar isSidebarOpen={isSidebarOpen} />\r\n\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          className=\"flex-grow p-6 overflow-auto bg-gray-100\"\r\n        >\r\n          {/* Header & Breadcrumb */}\r\n          <header className=\"flex justify-between items-center mb-4\">\r\n            <div>\r\n              <h1 className=\"text-2xl font-bold\">\r\n                {editId ? \"Edit User\" : \"Create User\"}\r\n              </h1>\r\n              <p className=\"text-gray-600\">\r\n                {editId ? \"Modify user details\" : \"Fill in user details\"}\r\n              </p>\r\n            </div>\r\n            <nav className=\"flex items-center text-gray-500\">\r\n              <NavLink to=\"/dashboard\" className=\"flex items-center\">\r\n                <FaTachometerAlt className=\"mr-1\" /> Home\r\n              </NavLink>\r\n              <BiChevronRight className=\"mx-2\" />\r\n              <NavLink to=\"/admin/user/list\">User List</NavLink>\r\n            </nav>\r\n          </header>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* ── Left column ───────────────────────────────────────── */}\r\n            <div className=\"space-y-4\">\r\n              {[\r\n                { label: \"Username\", name: \"userName\", req: true },\r\n                { label: \"First Name\", name: \"FirstName\", req: true },\r\n                { label: \"Last Name\", name: \"LastName\", req: true },\r\n                { label: \"Mobile\", name: \"Mobile\" },\r\n                { label: \"Email\", name: \"Email\", type: \"email\", req: true },\r\n              ].map(({ label, name, type = \"text\", req }) => (\r\n                <div key={name}>\r\n                  <label className=\"block font-semibold\">\r\n                    {label}\r\n                    {req && <span className=\"text-red-500\">*</span>}\r\n                  </label>\r\n                  <input\r\n                    type={type}\r\n                    name={name}\r\n                    value={formData[name]}\r\n                    onChange={handleChange}\r\n                    required={req}\r\n                    className=\"w-full p-2 border rounded\"\r\n                  />\r\n                </div>\r\n              ))}\r\n\r\n              {/* Role */}\r\n              <div>\r\n                <label className=\"block font-semibold\">\r\n                  Role <span className=\"text-red-500\">*</span>\r\n                </label>\r\n                <select\r\n                  name=\"Role\"\r\n                  value={formData.Role}\r\n                  onChange={handleChange}\r\n                  required\r\n                  className=\"w-full p-2 border rounded\"\r\n                >\r\n                  <option value=\"\">Select Role</option>\r\n                  {roles.map(r => (\r\n                    <option key={r._id} value={r._id}>\r\n                      {r.roleName}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Password */}\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <label className=\"block font-semibold\">\r\n                    Password{!editId && <span className=\"text-red-500\">*</span>}\r\n                  </label>\r\n                  <input\r\n  type=\"password\"\r\n  name=\"newPassword\"          // <— give it a non-standard name\r\n  autoComplete=\"new-password\" // <— tells browser to leave it alone\r\n  value={password}\r\n  onChange={e => setPassword(e.target.value)}\r\n  required={!editId}\r\n  className=\"w-full p-2 border rounded\"\r\n/>\r\n                </div>\r\n                <div>\r\n                  <label className=\"block font-semibold\">\r\n                    Confirm{!editId && <span className=\"text-red-500\">*</span>}\r\n                  </label>\r\n                 <input\r\n  type=\"password\"\r\n  name=\"confirmNewPassword\"\r\n  autoComplete=\"new-password\"\r\n  value={confPassword}\r\n  onChange={e => setConfPassword(e.target.value)}\r\n  required={!editId}\r\n  className=\"w-full p-2 border rounded\"\r\n/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* ── Right column ──────────────────────────────────────── */}\r\n            <div className=\"space-y-4\">\r\n              {/* Warehouse Group */}\r\n              <div>\r\n                <label className=\"block font-semibold\">Warehouse Group</label>\r\n                <select\r\n                  onChange={e => addWarehouse(e.target.value)}\r\n                  className=\"w-full p-2 border rounded\"\r\n                >\r\n                  <option value=\"\">Select Warehouse</option>\r\n                  {warehouses.map(w => (\r\n                    <option key={w._id} value={w._id}>\r\n                      {w.warehouseName}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n                <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                  {warehouseGroup.map(id => {\r\n                    const name =\r\n                      warehouses.find(w => w._id === id)?.warehouseName || id;\r\n                    return (\r\n                      <span\r\n                        key={id}\r\n                        className=\"px-2 py-1 bg-gray-200 rounded flex items-center\"\r\n                      >\r\n                        {name}\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={() => removeWarehouse(id)}\r\n                          className=\"ml-1 text-red-500\"\r\n                        >\r\n                          ×\r\n                        </button>\r\n                      </span>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Default Warehouse */}\r\n              <div>\r\n                <label className=\"block font-semibold\">\r\n                  Default Warehouse\r\n                </label>\r\n                <select\r\n                  value={defaultWarehouse}\r\n                  onChange={e => setDefaultWarehouse(e.target.value)}\r\n                  className=\"w-full p-2 border rounded\"\r\n                >\r\n                  <option value=\"\">Select Default</option>\r\n                  {warehouseGroup.map(id => {\r\n                    const name =\r\n                      warehouses.find(w => w._id === id)?.warehouseName || id;\r\n                    return (\r\n                      <option key={id} value={id}>\r\n                        {name}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n              </div>\r\n\r\n              {/* Store Assignment (only for admins) */}\r\n              {isAdminUser ? (\r\n                <div>\r\n                  <label className=\"block font-semibold\">Store</label>\r\n                  <select\r\n                    onChange={e => addStore(e.target.value)}\r\n                    className=\"w-full p-2 border rounded\"\r\n                  >\r\n                    <option value=\"\">Select Store</option>\r\n                    {stores.map(s => (\r\n                      <option key={s._id} value={s._id}>\r\n                        {s.StoreName}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\r\n                    {formData.Store.map(id => {\r\n                      const name = stores.find(s => s._id === id)?.StoreName || id;\r\n                      return (\r\n                        <span\r\n                          key={id}\r\n                          className=\"px-2 py-1 bg-gray-200 rounded flex items-center\"\r\n                        >\r\n                          {name}\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => removeStore(id)}\r\n                            className=\"ml-1 text-red-500\"\r\n                          >\r\n                            ×\r\n                          </button>\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <label className=\"block font-semibold\">Store</label>\r\n                  <div className=\"px-3 py-2 bg-gray-200 rounded\">\r\n                    {stores.find(s => s._id === formData.Store[0])?.StoreName ||\r\n                      \"—\"}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Status */}\r\n              <div>\r\n                <label className=\"block font-semibold\">Status</label>\r\n                <select\r\n                  value={status}\r\n                  onChange={e => setStatus(e.target.value)}\r\n                  className=\"w-full p-2 border rounded\"\r\n                >\r\n                  <option value=\"active\">Active</option>\r\n                  <option value=\"inactive\">Inactive</option>\r\n                </select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* ── Buttons ─────────────────────────────────────────────── */}\r\n          <div className=\"mt-6 flex justify-center gap-4\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-8 py-2 bg-green-600 text-white rounded\"\r\n            >\r\n              {editId ? \"Update\" : \"Save\"}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => navigate(\"/admin/user/list\")}\r\n              className=\"px-8 py-2 bg-orange-500 text-white rounded\"\r\n            >\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateUser;\r\n"],"names":["LoadingScreen","isSidebarOpen","setSidebarOpen","useState","_jsxs","className","children","_jsx","Navbar","Sidebar","CreateUser","_stores$find2","searchParams","useSearchParams","editId","get","navigate","useNavigate","token","localStorage","getItem","isAdminUser","JSON","parse","window","atob","split","role","e","console","error","useEffect","innerWidth","roles","setRoles","warehouses","setWarehouses","stores","setStores","formData","setFormData","userName","FirstName","LastName","Mobile","Email","Role","Store","warehouseGroup","setWarehouseGroup","defaultWarehouse","setDefaultWarehouse","password","setPassword","confPassword","setConfPassword","status","setStatus","loading","setLoading","headers","Authorization","axios","then","r","data","catch","result","res","u","find","x","_id","map","s","WarehouseGroup","Defaultwarehouse","finally","handleChange","name","value","target","f","onSubmit","async","preventDefault","alert","payload","trim","Password","put","post","err","_err$response","_err$response$data","response","message","NavLink","to","FaTachometerAlt","BiChevronRight","label","req","type","_ref","onChange","required","roleName","autoComplete","id","includes","w","warehouseName","_warehouses$find","onClick","filter","removeWarehouse","_warehouses$find2","StoreName","_stores$find","removeStore"],"sourceRoot":""}