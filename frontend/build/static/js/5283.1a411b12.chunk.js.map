{"version":3,"file":"static/js/5283.1a411b12.chunk.js","mappings":"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","sources":["components/Message/ChatPanel.jsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { FiSend } from 'react-icons/fi';\nimport Navbar from '../Navbar';\nimport Sidebar from '../Sidebar';\n\n/* axios with auth */\nconst api = axios.create({ baseURL: '/vps/api' });\napi.interceptors.request.use(cfg => {\n  const tok = localStorage.getItem('token');\n  if (tok) cfg.headers.Authorization = `Bearer ${tok}`;\n  return cfg;\n});\n\nexport default function ChatPanel() {\n  const myId = localStorage.getItem('userId');\n\n  /* layout */\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\n\n  /* conversations */\n  const [convs, setConvs] = useState([]);\n  const [selected, setSel] = useState(null);\n\n  /* messages */\n  const [msgs, setMsgs] = useState([]);\n  const [body, setBody] = useState('');\n  const bottomRef = useRef(null);\n\n  /* new conversation */\n  const [search, setSearch] = useState('');          // text typed\n  const [suggestions, setSuggestions] = useState([]); // [{_id,name}]\n\n  /* polling refs */\n  const POLL = 5000;\n  const listTimer = useRef(null);\n  const msgTimer  = useRef(null);\n\n  /* ------------------------------------------------------------------ */\n  const enrichUnread = async (list) => Promise.all(list.map(async c => {\n    try {\n      const r = await api.get(`/chat/conversations/${c._id}/messages?limit=1`);\n      const last = r.data.data[0];\n      return { ...c, unread: last && !last.readBy.includes(myId) && last.sender !== myId };\n    } catch { return { ...c, unread: false }; }\n  }));\n\n  const loadConvs = async () => {\n    const { data } = await api.get('/chat/conversations');\n    setConvs(await enrichUnread(data.data));\n  };\n\n  const loadMsgs = async cid => {\n    const { data } = await api.get(`/chat/conversations/${cid}/messages?limit=100`);\n    setMsgs(data.data);\n    await api.patch(`/chat/conversations/${cid}/readAll`);\n    loadConvs();\n    setTimeout(()=>bottomRef.current?.scrollIntoView({behavior:'smooth'}),0);\n  };\n\n  const selectConv = cid => {\n    setSel(cid);\n    loadMsgs(cid);\n    clearInterval(msgTimer.current);\n    msgTimer.current = setInterval(()=>loadMsgs(cid), POLL);\n  };\n\n  const send = async () => {\n    if(!body.trim()||!selected) return;\n    const tmp={_id:'tmp-'+Date.now(),sender:myId,body,createdAt:new Date().toISOString()};\n    setMsgs(p=>[...p,tmp]); setBody('');\n    setTimeout(()=>bottomRef.current?.scrollIntoView({behavior:'smooth'}),0);\n    try { await api.post('/chat/messages',{conversationId:selected,body:tmp.body}); loadMsgs(selected);} catch { setMsgs(p=>p.filter(m=>m._id!==tmp._id)); alert('Failed'); }\n  };\n\n  /* -- customer search ------------------------------------------------ */\n  const fetchSuggestions = useCallback(async (q) => {\n    if(q.length < 2) { setSuggestions([]); return; }\n    try {\n      const { data } = await api.get(`/customers?search=${encodeURIComponent(q)}`); // endpoint must return [{_id,name}]\n      setSuggestions(data.data);\n    } catch { setSuggestions([]); }\n  }, []);\n\n  useEffect(()=>{ fetchSuggestions(search); }, [search, fetchSuggestions]);\n\n  const startConv = async cust => {\n    setSearch(''); setSuggestions([]);\n    try {\n      const { data } = await api.post('/chat/conversations',{otherUserId:cust._id});\n      await loadConvs();\n      selectConv(data.data._id);\n    } catch { alert('Could not start chat'); }\n  };\n\n  /* initial load + polling list */\n  useEffect(()=>{ loadConvs(); listTimer.current = setInterval(loadConvs,POLL); return ()=>{ clearInterval(listTimer.current); clearInterval(msgTimer.current);} },[]);\n\n  /* ------------------------------------------------------------------ UI */\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-50\">\n      <Navbar isSidebarOpen={isSidebarOpen} setSidebarOpen={setSidebarOpen} />\n      <div className=\"flex flex-1 overflow-hidden\">\n        <Sidebar isSidebarOpen={isSidebarOpen} />\n\n        {/* left bar */}\n        <aside className=\"w-60 border-r bg-white shadow-sm flex flex-col overflow-y-auto relative\">\n          {/* search box */}\n          <div className=\"p-4 border-b bg-gray-50\">\n            <div className=\"relative\">\n              <input\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder=\"Search customerâ€¦\"\n                className=\"w-full p-2 pl-8 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition\"\n              />\n              <svg\n                className=\"absolute left-2 top-2.5 h-4 w-4 text-gray-400\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"2\"\n                  d=\"M21 21l-4.35-4.35M11 19a8 8 0 100-16 8 8 0 000 16z\"\n                />\n              </svg>\n              {!!suggestions.length && (\n                <ul className=\"absolute z-10 bg-white border rounded-lg w-full mt-1 max-h-48 overflow-y-auto shadow-lg transition-all duration-200\">\n                  {suggestions.map((c) => (\n                    <li\n                      key={c._id}\n                      onClick={() => startConv(c)}\n                      className=\"px-3 py-2 text-sm hover:bg-blue-50 cursor-pointer transition-colors\"\n                    >\n                      {c.name}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </div>\n          {/* convo list */}\n          {convs.map((c) => {\n            const other = c.participants.find((p) => p !== myId) || \"Unknown\";\n            return (\n              <div\n                key={c._id}\n                onClick={() => selectConv(c._id)}\n                className={`relative px-4 py-3 text-sm cursor-pointer hover:bg-blue-50 transition-colors ${\n                  selected === c._id ? \"bg-blue-100\" : \"\"\n                }`}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center text-xs font-medium text-gray-600\">\n                    {other[0]?.toUpperCase()}\n                  </div>\n                  <span className=\"truncate\">{other}</span>\n                </div>\n                {c.unread && (\n                  <span className=\"absolute right-4 top-1/2 transform -translate-y-1/2 h-2.5 w-2.5 bg-red-500 rounded-full shadow\" />\n                )}\n              </div>\n            );\n          })}\n        </aside>\n\n        {/* chat area */}\n        <section className=\"flex-1 flex flex-col bg-gradient-to-b from-gray-50 to-gray-100\">\n          {!selected ? (\n            <div className=\"flex-1 flex items-center justify-center text-gray-500 text-lg\">\n              Select or start a conversation\n            </div>\n          ) : (\n            <>\n              {/* Chat header */}\n              <div className=\"p-4 border-b bg-white shadow-sm\">\n                <h3 className=\"text-sm font-medium text-gray-700\">\n                  {convs.find((c) => c._id === selected)?.participants.find((p) => p !== myId) || \"Chat\"}\n                </h3>\n              </div>\n\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n                {msgs.map((m) => {\n                  const mine = m.sender === myId;\n                  return (\n                    <div\n                      key={m._id}\n                      className={`flex ${mine ? \"justify-end\" : \"justify-start\"} mb-2 animate-fade-in`}\n                    >\n                      <div className={`flex items-end gap-2 ${mine ? \"flex-row-reverse\" : \"\"}`}>\n                        <div className=\"h-6 w-6 rounded-full bg-gray-200 flex items-center justify-center text-xs text-gray-600\">\n                          {mine ? \"You\" : m.sender[0]?.toUpperCase()}\n                        </div>\n                        <div>\n                          <div\n                            className={`max-w-xs px-4 py-2 rounded-2xl text-sm shadow-sm ${\n                              mine\n                                ? \"bg-blue-600 text-white\"\n                                : \"bg-white text-gray-800 border border-gray-200\"\n                            }`}\n                          >\n                            {m.body}\n                          </div>\n                          <div className=\"text-xs text-gray-500 mt-1\">\n                            {new Date(m.createdAt).toLocaleTimeString()}\n                            {mine && m._id.startsWith(\"tmp-\") && (\n                              <span className=\"ml-1 text-gray-400\">Sending...</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n                <div ref={bottomRef} />\n              </div>\n\n              <div className=\"p-4 bg-white border-t shadow-sm\">\n                <div className=\"flex items-center gap-2 max-w-3xl mx-auto\">\n                  <input\n                    className=\"flex-1 p-2.5 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-300 transition\"\n                    placeholder=\"Type a message...\"\n                    value={body}\n                    onChange={(e) => setBody(e.target.value)}\n                    onKeyDown={(e) => e.key === \"Enter\" && send()}\n                    aria-label=\"Type a message\"\n                  />\n                  <button\n                    onClick={send}\n                    className=\"p-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-transform transform hover:scale-105\"\n                    aria-label=\"Send message\"\n                  >\n                    <FiSend size={18} />\n                  </button>\n                </div>\n              </div>\n            </>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n"],"names":["api","axios","create","baseURL","ChatPanel","_convs$find","myId","localStorage","getItem","isSidebarOpen","setSidebarOpen","useState","convs","setConvs","selected","setSel","msgs","setMsgs","body","setBody","bottomRef","useRef","search","setSearch","suggestions","setSuggestions","listTimer","msgTimer","loadConvs","async","data","get","Promise","all","list","map","last","c","_id","unread","readBy","includes","sender","enrichUnread","loadMsgs","cid","patch","setTimeout","_bottomRef$current","current","scrollIntoView","behavior","selectConv","clearInterval","setInterval","send","trim","tmp","Date","now","createdAt","toISOString","p","_bottomRef$current2","post","conversationId","filter","m","alert","fetchSuggestions","useCallback","q","length","encodeURIComponent","useEffect","_jsxs","className","children","_jsx","Navbar","Sidebar","value","onChange","e","target","placeholder","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","otherUserId","cust","startConv","name","_other$","other","participants","find","toUpperCase","_Fragment","_m$sender$","mine","toLocaleTimeString","startsWith","ref","onKeyDown","key","FiSend","size","interceptors","request","use","cfg","tok","headers","Authorization"],"sourceRoot":""}